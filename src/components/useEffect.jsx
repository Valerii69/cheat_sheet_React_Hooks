/*useEffect
–•—É–∫ useEffect() –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π) –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞. –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–ª–±–µ–∫ –∏ –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π. –ß—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —Ç–æ –ª–æ–≥–∏–∫–∞ —Å–ª–µ–¥—É—é—â–∞—è:

–º–∞—Å—Å–∏–≤ –Ω–µ —É–∫–∞–∑–∞–Ω: —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ
—É–∫–∞–∑–∞–Ω –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤: —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
—É–∫–∞–∑–∞–Ω –º–∞—Å—Å–∏–≤ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏: —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
–û—á–∏—Å—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ö—É–∫–∞.*/

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
const handler = () => {
    console.log('–°–ª—É—á–∏–ª—Å—è –∫–ª–∏–∫!')
  }
  
  useEffect(() => {
    // –∑–∞–ø—É—Å–∫ —ç—Ñ—Ñ–µ–∫—Ç–∞
    window.addEventListener('click', handler)
  
    // –æ—á–∏—Å—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
    return () => {
      window.removeEventListener('click', handler)
    }
    // –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  }, [handler])

//   –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
const BasicEffect = () => {
  const [age, setAge] = useState(19)

  const handleClick = () => setAge(age + 1)

  useEffect(() => {
    document.title = `–¢–µ–±–µ ${age} –ª–µ—Ç!`
  })

  return (
    <>
      <p>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.</p>
      <button onClick={handleClick}>–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫!</button>
    </>
  )
}

// –û—á–∏—Å—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞

const CleanupEffect = () => {
  useEffect(() => {
    const clicked = () => console.log('–ö–ª–∏–∫!')

    window.addEventListener('click', clicked)

    return () => {
      window.removeEventListener('click', clicked)
    }
  }, [])

  return (
    <>
      <p>–ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.</p>
    </>
  )
}

// –ù–µ—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤

const MultipleEffects = () => {
  useEffect(() => {
    const clicked = () => console.log('–ö–ª–∏–∫!')

    window.addEventListener('click', clicked)

    return () => {
      window.removeEventListener('click', clicked)
    }
  }, [])

  useEffect(() => {
    console.log('–í—Ç–æ—Ä–æ–π —ç—Ñ—Ñ–µ–∫—Ç.')
  })

  return (
    <>
      <p>–ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å.</p>
    </>
  )
}

–ú–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
const DependencyEffect = () => {
  const [randomInt, setRandomInt] = useState(0)
  const [effectLogs, setEffectLogs] = useState([])
  const [count, setCount] = useState(1)

  useEffect(() => {
    setEffectLogs((prev) => [
      ...prev,
      `–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–æ–º–µ—Ä ${count}.`
    ])

    setCount(count + 1)
  }, [randomInt])

  return (
    <>
      <h3>{randomInt}</h3>
      <button onClick={() => setRandomInt(~~(Math.random() * 10))}>
        –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!
      </button>
      <ul>
        {effectLogs.map((effect, i) => (
          <li key={i}>{' üòà '.repeat(i) + effect}</li>
        ))}
      </ul>
    </>
  )
}

// –ü—Ä–æ–ø—É—Å–∫ —ç—Ñ—Ñ–µ–∫—Ç–∞
const SkipEffect = () => {
  const [randomInt, setRandomInt] = useState(0)
  const [effectLogs, setEffectLogs] = useState([])
  const [count, setCount] = useState(1)

  useEffect(() => {
    setEffectLogs((prev) => [
      ...prev,
      `–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–æ–º–µ—Ä ${count}.`
    ])

    setCount(count + 1)
  }, [])

  return (
    <>
      <h3>{randomInt}</h3>
      <button onClick={() => setRandomInt(~~(Math.random() * 10))}>
        –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!
      </button>
      <ul>
        {effectLogs.map((effect, i) => (
          <li key={i}>{' üòà '.repeat(i) + effect}</li>
        ))}
      </ul>
    </>
  )
}

// –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä
const UserList = () => {
  const [users, setUsers] = useState([])
  const [count, setCount] = useState(1)
  const [url, setUrl] = useState(
    `https://jsonplaceholder.typicode.com/users?_limit=${count}`
  )

  useEffect(() => {
    async function fetchUsers() {
      const response = await fetch(url)
      const users = await response.json()
      setUsers(users)
    }
    fetchUsers()
  }, [url])

  const handleSubmit = (e) => {
    e.preventDefault()
    setUrl(`https://jsonplaceholder.typicode.com/users?_limit=${count}`)
  }

  return (
    <>
      <h1>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h1>
      <form onSubmit={handleSubmit}>
        <label>
          –°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?
          <input
            type='number'
            value={count}
            onChange={(e) => {
              setCount(e.target.value)
            }}
          />
          <button>–ü–æ–ª—É—á–∏—Ç—å</button>
        </label>
      </form>
      <ul>
        {users.map(({ id, name, username, email, address: { city } }) => (
          <li key={id}>
            <span>
              <b>–ò–º—è:</b> {name}
            </span>
            <br />
            <span>
              <i>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</i> {username}
            </span>
            <br />
            <span>
              <b>–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:</b> {email}
            </span>
            <br />
            <span>
              <i>–ì–æ—Ä–æ–¥:</i> {city}
            </span>
            <br />
          </li>
        ))}
      </ul>
    </>
  )
}